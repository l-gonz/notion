# Next Due calculation for recurring tasks
# Notion formulas scripting language
#
# Modified from Thomas Frank's Ultimate Tasks template: 
# https://thomasfrank.notion.site/Ultimate-Tasks-for-Notion-982c5dd2b2c24818b58bf5f4f8f04071

if(!empty(prop("Recur Interval")) and !empty(prop("Due")),
    if(prop("Recur Interval") > 0 and prop("Recur Interval") == ceil(prop("Recur Interval")),
        lets(
            debug, false,
            
            recurUnit, ifs(
                prop("Recur Unit") == "Day(s)", "days",
                prop("Recur Unit") == "Week(s)", "weeks",
                prop("Recur Unit") == "Month(s)", "months",
                prop("Recur Unit") == "Year(s)", "years",
                prop("Recur Unit") == "Month(s) on the Last Day", "monthsonthelastday",
                prop("Recur Unit") == "Month(s) on the First Weekday", "monthsonthefirstweekday",
                prop("Recur Unit") == "Month(s) on the Last Weekday", "monthsonthelastweekday",
                "days"
            ),
            
            weekdays, match([
                if(
                    includes(prop("Recur week days"), "Monday"), 1, false
                ),
                
                if(
                    includes(prop("Recur week days"), "Tuesday"), 2, false
                ),
                
                if(
                    includes(prop("Recur week days"), "Wednesday"), 3, false
                ),
                
                if(
                    includes(prop("Recur week days"), "Thursday"), 4, false
                ),
                
                if(
                    includes(prop("Recur week days"), "Friday"), 5, false
                ),
                
                if(
                    includes(prop("Recur week days"), "Saturday"), 6, false
                ),
                
                if(
                    includes(prop("Recur week days"), "Sunday"), 7, false
                )
            ], "[1-7]"),
            
            dateDue, prop("Due"),
            
            dateDueEnd, dateEnd(prop("Due")),
            
            hasRange, dateEnd(dateDueEnd) > dateStart(dateDue),
            dueDayRange, dateBetween(dateDueEnd, dateDue, "days"),
            dueMinuteRange, dateBetween(dateDueEnd, dateDue, "minute"),
            
            lastDayBaseDate, if(
                includes(["monthsonthelastday", "monthsonthefirstweekday", "monthsonthelastweekday"], recurUnit),
                if(year(now()) * 12 + month(now()) - (year(dateDue) * 12 + month(dateDue)) > 0,
                    dateSubtract(dateAdd(dateSubtract(dateAdd(dateDue, ceil((year(now()) * 12 + month(now()) - (year(dateDue) * 12 + month(dateDue))) / prop("Recur Interval")) * prop("Recur Interval"), "months"), date(dateAdd(dateDue, ceil((year(now()) * 12 + month(now()) - (year(dateDue) * 12 + month(dateDue))) / prop("Recur Interval")) * prop("Recur Interval"), "months")) - 1, "days"), 1, "months"), 1, "days"),
                    dateSubtract(dateAdd(dateSubtract(dateAdd(dateDue, prop("Recur Interval"), "months"), date(dateAdd(dateDue, prop("Recur Interval"), "months")) - 1, "days"), 1, "months"), 1, "days")),
                false
            ),
            
            firstDayBaseDate, if(lastDayBaseDate != false, dateSubtract(lastDayBaseDate, date(lastDayBaseDate) - 1, "days"), false),
            
            firstWeekdayBaseDate, if(lastDayBaseDate != false,
                if(
                    test(day(firstDayBaseDate), "6|7"), 
                    dateAdd(firstDayBaseDate, 8 - day(firstDayBaseDate), "days"),
                    firstDayBaseDate
                ),
                false
            ),
            
            lastWeekdayBaseDate, if(lastDayBaseDate != false,
                if(
                    test(day(lastDayBaseDate), "6|7"), 
                    dateSubtract(lastDayBaseDate, day(lastDayBaseDate) - 5, "days"),
                    lastDayBaseDate
                ),
                false
            ),
            
            nextDueStart, ifs(
                recurUnit == "days" and length(weekdays) > 0 and prop("Recur Interval") == 1, 
                    ifs(
                        includes(weekdays, format(day(dateAdd(dateDue, 1, "days")))), dateAdd(dateDue, 1, "days"),
                        includes(weekdays, format(day(dateAdd(dateDue, 2, "days")))), dateAdd(dateDue, 2, "days"),
                        includes(weekdays, format(day(dateAdd(dateDue, 3, "days")))), dateAdd(dateDue, 3, "days"),
                        includes(weekdays, format(day(dateAdd(dateDue, 4, "days")))), dateAdd(dateDue, 4, "days"),
                        includes(weekdays, format(day(dateAdd(dateDue, 5, "days")))), dateAdd(dateDue, 5, "days"),
                        includes(weekdays, format(day(dateAdd(dateDue, 6, "days")))), dateAdd(dateDue, 6, "days"),
                        includes(weekdays, format(day(dateAdd(dateDue, 7, "days")))), dateAdd(dateDue, 7, "days"),
                        false
                    ),
                
                recurUnit == "monthsonthelastday", lastDayBaseDate,
                
                recurUnit == "monthsonthefirstweekday", firstWeekdayBaseDate,
                
                recurUnit == "monthsonthelastweekday", lastWeekdayBaseDate,
                
                includes(["days", "weeks", "months", "years"], recurUnit),
                    dateAdd(dateDue, prop("Recur Interval"), recurUnit)
            ),
            
            nextDueEnd, if(hasRange and nextDueStart != false, 
                dateAdd(
                    dateAdd(nextDueStart,
                        dueDayRange, "days"),
                        dueMinuteRange, "minute"),
                false
            ),
            
            nextDue, if(hasRange and nextDueEnd != false, dateRange(nextDueStart, nextDueEnd), nextDueStart),
            
            if(
                debug == true,
                "---------\n" + prop("Task") + "\n---------" +
                "\npropDue: " + prop("Due") +
                "\npropRecurInterval: " + prop("Recur Interval") +
                "\npropRecurUnit: " + prop("Recur Unit") +
                "\npropDays: " + prop("Recur week days") +
                "\nrecurUnit: " + recurUnit +
                "\nweekdays: " + weekdays +
                "\ndateDue: " + dateDue +
                "\ndateDueEnd: " + dateDueEnd +
                "\nhasRange: " + hasRange +
                "\ndueDayRange: " + dueDayRange +
                "\ndueMinuteRange: " + dueMinuteRange +
                "\nnow: " + now() +
                "\nlastDayBaseDate: " + lastDayBaseDate +
                "\nfirstDayBaseDate: " + firstDayBaseDate +
                "\nfirstWeekdayBaseDate: " + firstWeekdayBaseDate +
                "\nlastWeekdayBaseDate: " + lastWeekdayBaseDate +
                "\nnextDueStart: " + nextDueStart +
                "\nnextDueEnd: " + nextDueEnd +
                "\nnextDue: " + nextDue,
                nextDue
            )
        ),
    "Error: Non-Whole or Negative Recur Interval"),
"")
